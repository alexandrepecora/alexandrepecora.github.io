## Transposing
dt <- melt(dt, id.vars = "Country/Region", variable.name = "Date")
## Identifying Key Variables
setnames(dt, "Country/Region", "Country")
setkey(dt, "Country")
## Subsetting critical countries
dt_key <- dt[countries]
## Cases > initial value chosen
dt_key <- dt_key[value > initial]
dt_key <- dt_key[, Days := sequence(.N), by="Country" ]
return(dt_key)
}
model <- setDT(read.csv("U:/Corona/Results_Deads.csv"))
setnames(model, "誰..Days", "Days")
dt_baseline <- model[, c("Days", "Baseline")]
setnames(dt_baseline, "Baseline", "value")
dt_baseline <- dt_baseline[, "Case" := "Baseline"]
dt_quar <- model[, c("Days", "Quarantine")]
setnames(dt_quar, "Quarantine", "value")
dt_quar <- dt_quar[, "Case" := "Quarantine"]
dt_testing <- model[, c("Days", "Testing")]
setnames(dt_testing, "Testing", "value")
dt_testing <- dt_testing[, "Case" := "Testing"]
dt_hopkins <- treat_data(deaths, initial = 10, "Brazil")
dt_hopkins <- dt_hopkins[, -"Date"]
setnames(dt_hopkins, "Country", "Case")
setcolorder(dt_hopkins, c("Days", "value", "Case"))
dt_quar <- dt_quar[,value := value*10]
full_data <- rbind(dt_baseline, dt_quar, fill = T)
test_data <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
brazil_quar <- rbind(dt_hopkins, dt_quar, fill = T)
## PLOT 1
group.colors <- c(Brazil = "green", Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data[Days < day_limit, value])
# Plot
ggplot(data = full_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors)+
scale_y_continuous(label = comma,
# Features of the first axis
name = "Baseline",
# Add a second axis and specify its features
sec.axis = sec_axis(label = comma, trans=~./10, name="Quarentena")
) + theme(axis.title.y.left =element_text(face="bold", color = "red"),
axis.text.y.left = element_text(face="bold", color = "red"),
axis.line.y.left = element_line(color = "red"),
axis.ticks.y.left = element_line(color = "red"),
axis.text.y.right = element_text(face="bold"),
axis.title.y.right =element_text(face="bold"),
legend.title=element_blank())
dt_quar <- dt_quar[,value := value/10]
full_data <- rbind(dt_baseline, dt_quar, fill = T)
test_data <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
brazil_quar <- rbind(dt_hopkins, dt_quar, fill = T)
## PLOT 2
group.colors <- c(Brazil = "green", Quarantine = "black")
day_limit <- 70
y_lim <- max(brazil_quar[ Days < day_limit, value])
# Plot
ggplot(data = brazil_quar, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) + geom_point(shape=1, alpha = 0.5) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors)
group.colors <- c(Brazil = "green", Quarantine = "black")
day_limit <- 70
y_lim <- max(full_data[ Days < day_limit, value])
# Plot
ggplot(data = brazil_quar, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) + geom_point(shape=1, alpha = 0.5) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors) +
scale_y_continuous(label = comma) +
theme(legend.title=element_blank())
## PLOT 2
group.colors <- c(Brazil = "green", Quarantine = "black")
day_limit <- 70
y_lim <- max(brazil_quar[ Days < day_limit, value])
# Plot
ggplot(data = brazil_quar, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) + geom_point(shape=1, alpha = 0.5) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors) +
scale_y_continuous(label = comma) +
theme(legend.title=element_blank())
y_lim
group.colors <- c(Brazil = "green", Quarantine = "black")
day_limit <- 70
y_lim <- max(brazil_quar[ Days < day_limit, value])
# Plot
ggplot(data = brazil_quar, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) + geom_point(shape=1, alpha = 0.5) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors) +
scale_y_continuous(label = comma) + limits=c(0, y_lim) +
theme(legend.title=element_blank())
group.colors <- c(Brazil = "green", Quarantine = "black")
day_limit <- 70
y_lim <- max(brazil_quar[ Days < day_limit, value])
# Plot
ggplot(data = brazil_quar, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) + geom_point(shape=1, alpha = 0.5) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors) +
scale_y_continuous(label = comma, limits=c(0, y_lim)) +
theme(legend.title=element_blank())
group.colors <- c(Brazil = "green", Quarantine = "black")
day_limit <- 70
y_lim <- max(brazil_quar[ Days < day_limit, value])
# Plot
ggplot(data = brazil_quar, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) + geom_point(shape=1, alpha = 0.5) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors) +
scale_y_continuous(label = comma) +
theme(legend.title=element_blank())
model_gdp <- setDT(read.csv("U:/Corona/Results_GDP.csv"))
setnames(model_gdp, "誰..Days", "Days")
dt_baseline <- model_gdp[, c("Days", "Baseline")]
setnames(dt_baseline, "Baseline", "value")
dt_baseline <- dt_baseline[, "Case" := "Baseline"]
dt_baseline <- dt_baseline[, value := value/200000000]
dt_quar <- model_gdp[, c("Days", "Quarantine")]
setnames(dt_quar, "Quarantine", "value")
dt_quar <- dt_quar[, "Case" := "Quarantine"]
dt_quar <- dt_quar[, value := value/200000000]
dt_testing <- model_gdp[, c("Days", "Testing")]
setnames(dt_testing, "Testing", "value")
dt_testing <- dt_testing[, "Case" := "Testing"]
dt_testing <- dt_testing[, value := value/200000000]
full_data_gdp <- rbind(dt_baseline, dt_quar, fill = T)
test_data_gdp <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
## PLOT 1
group.colors <- c(Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data_gdp[Days < day_limit, value])
# Plot
ggplot(data = full_data_gdp, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
group.colors <- c(Baseline = "red", Quarantine = "black", Testing ="blue")
g1 <- ggplot(data = test_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
g2 <- ggplot(data = test_data_gdp, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
group.colors <- c(Baseline = "red", Quarantine = "black", Testing ="blue")
g1 <- ggplot(data = test_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
g2 <- ggplot(data = test_data_gdp, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
group.colors <- c(Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data_gdp[Days < day_limit, value])
# Plot
ggplot(data = full_data_gdp, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
model_gdp <- setDT(read.csv("U:/Corona/Results_GDP.csv"))
setnames(model_gdp, "誰..Days", "Days")
dt_baseline <- model_gdp[, c("Days", "Baseline")]
setnames(dt_baseline, "Baseline", "value")
dt_baseline <- dt_baseline[, "Case" := "Baseline"]
dt_baseline <- dt_baseline[, value := value/200000000]
dt_quar <- model_gdp[, c("Days", "Quarantine")]
setnames(dt_quar, "Quarantine", "value")
dt_quar <- dt_quar[, "Case" := "Quarantine"]
dt_quar <- dt_quar[, value := value/200000000]
dt_testing <- model_gdp[, c("Days", "Testing")]
setnames(dt_testing, "Testing", "value")
dt_testing <- dt_testing[, "Case" := "Testing"]
dt_testing <- dt_testing[, value := value/200000000]
full_data_gdp <- rbind(dt_baseline, dt_quar, fill = T)
test_data_gdp <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
## PLOT 1
group.colors <- c(Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data_gdp[Days < day_limit, value])
# Plot
ggplot(data = full_data_gdp, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
group.colors <- c(Baseline = "red", Quarantine = "black", Testing ="blue")
g1 <- ggplot(data = test_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
g2 <- ggplot(data = test_data_gdp, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case)), size = 1.5) +
xlim(1, day_limit)  +  scale_color_manual(values=group.colors)
g1
g2
library(dplyr)
library(data.table)
library(httr)
library(ggplot2)
library(scales)
library(tidyr)
library(zoo)
library(ggpubr)
theme_set(theme_pubr())
library(rvest)
baseURL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series"
confirmed <- fread(paste0(baseURL, "/time_series_covid19_confirmed_global.csv"))
deaths <- fread(paste0(baseURL, "/time_series_covid19_deaths_global.csv"))
recovered <- fread(paste0(baseURL, "/time_series_covid19_recovered_global.csv"))
# ------------------------------------------------------------------------------------------
## ORGANIZING DATA
treat_data <- function(dt, initial, countries) {
## Adding all provinces
dt <- dt[,-c("Province/State","Lat","Long") ]
dt <- dt[,lapply(.SD,sum),by="Country/Region"]
## Transposing
dt <- melt(dt, id.vars = "Country/Region", variable.name = "Date")
## Identifying Key Variables
setnames(dt, "Country/Region", "Country")
setkey(dt, "Country")
## Subsetting critical countries
dt_key <- dt[countries]
## Cases > initial value chosen
dt_key <- dt_key[value > initial]
dt_key <- dt_key[, Days := sequence(.N), by="Country" ]
return(dt_key)
}
model <- setDT(read.csv("U:/Corona/Results_Deads.csv"))
setnames(model, "誰..Days", "Days")
dt_baseline <- model[, c("Days", "Baseline")]
setnames(dt_baseline, "Baseline", "value")
dt_baseline <- dt_baseline[, "Case" := "Baseline"]
dt_quar <- model[, c("Days", "Quarantine")]
setnames(dt_quar, "Quarantine", "value")
dt_quar <- dt_quar[, "Case" := "Quarantine"]
dt_testing <- model[, c("Days", "Testing")]
setnames(dt_testing, "Testing", "value")
dt_testing <- dt_testing[, "Case" := "Testing"]
dt_hopkins <- treat_data(deaths, initial = 10, "Brazil")
dt_hopkins <- dt_hopkins[, -"Date"]
setnames(dt_hopkins, "Country", "Case")
setcolorder(dt_hopkins, c("Days", "value", "Case"))
dt_quar <- dt_quar[,value := value*10]
full_data <- rbind(dt_baseline, dt_quar, fill = T)
test_data <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
brazil_quar <- rbind(dt_hopkins, dt_quar, fill = T)
## PLOT 1
group.colors <- c(Brazil = "green", Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data[Days < day_limit, value])
# Plot
ggplot(data = full_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors)+
scale_y_continuous(label = points(),
# Features of the first axis
name = "Baseline",
# Add a second axis and specify its features
sec.axis = sec_axis(label = comma, trans=~./10, name="Quarentena")
) + theme(axis.title.y.left =element_text(face="bold", color = "red"),
axis.text.y.left = element_text(face="bold", color = "red"),
axis.line.y.left = element_line(color = "red"),
axis.ticks.y.left = element_line(color = "red"),
axis.text.y.right = element_text(face="bold"),
axis.title.y.right =element_text(face="bold"),
legend.title=element_blank())
library(dplyr)
library(data.table)
library(httr)
library(ggplot2)
library(scales)
library(tidyr)
library(zoo)
library(ggpubr)
theme_set(theme_pubr())
library(rvest)
baseURL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series"
confirmed <- fread(paste0(baseURL, "/time_series_covid19_confirmed_global.csv"))
deaths <- fread(paste0(baseURL, "/time_series_covid19_deaths_global.csv"))
recovered <- fread(paste0(baseURL, "/time_series_covid19_recovered_global.csv"))
# ------------------------------------------------------------------------------------------
## ORGANIZING DATA
treat_data <- function(dt, initial, countries) {
## Adding all provinces
dt <- dt[,-c("Province/State","Lat","Long") ]
dt <- dt[,lapply(.SD,sum),by="Country/Region"]
## Transposing
dt <- melt(dt, id.vars = "Country/Region", variable.name = "Date")
## Identifying Key Variables
setnames(dt, "Country/Region", "Country")
setkey(dt, "Country")
## Subsetting critical countries
dt_key <- dt[countries]
## Cases > initial value chosen
dt_key <- dt_key[value > initial]
dt_key <- dt_key[, Days := sequence(.N), by="Country" ]
return(dt_key)
}
model <- setDT(read.csv("U:/Corona/Results_Deads.csv"))
setnames(model, "誰..Days", "Days")
dt_baseline <- model[, c("Days", "Baseline")]
setnames(dt_baseline, "Baseline", "value")
dt_baseline <- dt_baseline[, "Case" := "Baseline"]
dt_quar <- model[, c("Days", "Quarantine")]
setnames(dt_quar, "Quarantine", "value")
dt_quar <- dt_quar[, "Case" := "Quarantine"]
dt_testing <- model[, c("Days", "Testing")]
setnames(dt_testing, "Testing", "value")
dt_testing <- dt_testing[, "Case" := "Testing"]
dt_hopkins <- treat_data(deaths, initial = 10, "Brazil")
dt_hopkins <- dt_hopkins[, -"Date"]
setnames(dt_hopkins, "Country", "Case")
setcolorder(dt_hopkins, c("Days", "value", "Case"))
dt_quar <- dt_quar[,value := value*10]
full_data <- rbind(dt_baseline, dt_quar, fill = T)
test_data <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
brazil_quar <- rbind(dt_hopkins, dt_quar, fill = T)
## PLOT 1
group.colors <- c(Brazil = "green", Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data[Days < day_limit, value])
# Plot
ggplot(data = full_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors)+
scale_y_continuous(label = point,
# Features of the first axis
name = "Baseline",
# Add a second axis and specify its features
sec.axis = sec_axis(label = comma, trans=~./10, name="Quarentena")
) + theme(axis.title.y.left =element_text(face="bold", color = "red"),
axis.text.y.left = element_text(face="bold", color = "red"),
axis.line.y.left = element_line(color = "red"),
axis.ticks.y.left = element_line(color = "red"),
axis.text.y.right = element_text(face="bold"),
axis.title.y.right =element_text(face="bold"),
legend.title=element_blank())
library(dplyr)
library(data.table)
library(httr)
library(ggplot2)
library(scales)
library(tidyr)
library(zoo)
library(ggpubr)
theme_set(theme_pubr())
library(rvest)
baseURL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series"
confirmed <- fread(paste0(baseURL, "/time_series_covid19_confirmed_global.csv"))
deaths <- fread(paste0(baseURL, "/time_series_covid19_deaths_global.csv"))
recovered <- fread(paste0(baseURL, "/time_series_covid19_recovered_global.csv"))
# ------------------------------------------------------------------------------------------
## ORGANIZING DATA
treat_data <- function(dt, initial, countries) {
## Adding all provinces
dt <- dt[,-c("Province/State","Lat","Long") ]
dt <- dt[,lapply(.SD,sum),by="Country/Region"]
## Transposing
dt <- melt(dt, id.vars = "Country/Region", variable.name = "Date")
## Identifying Key Variables
setnames(dt, "Country/Region", "Country")
setkey(dt, "Country")
## Subsetting critical countries
dt_key <- dt[countries]
## Cases > initial value chosen
dt_key <- dt_key[value > initial]
dt_key <- dt_key[, Days := sequence(.N), by="Country" ]
return(dt_key)
}
model <- setDT(read.csv("U:/Corona/Results_Deads.csv"))
setnames(model, "誰..Days", "Days")
dt_baseline <- model[, c("Days", "Baseline")]
setnames(dt_baseline, "Baseline", "value")
dt_baseline <- dt_baseline[, "Case" := "Baseline"]
dt_quar <- model[, c("Days", "Quarantine")]
setnames(dt_quar, "Quarantine", "value")
dt_quar <- dt_quar[, "Case" := "Quarantine"]
dt_testing <- model[, c("Days", "Testing")]
setnames(dt_testing, "Testing", "value")
dt_testing <- dt_testing[, "Case" := "Testing"]
dt_hopkins <- treat_data(deaths, initial = 10, "Brazil")
dt_hopkins <- dt_hopkins[, -"Date"]
setnames(dt_hopkins, "Country", "Case")
setcolorder(dt_hopkins, c("Days", "value", "Case"))
dt_quar <- dt_quar[,value := value*10]
full_data <- rbind(dt_baseline, dt_quar, fill = T)
test_data <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
brazil_quar <- rbind(dt_hopkins, dt_quar, fill = T)
## PLOT 1
group.colors <- c(Brazil = "green", Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data[Days < day_limit, value])
# Plot
ggplot(data = full_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors)+
scale_y_continuous(label = comma,
# Features of the first axis
name = "Baseline",
# Add a second axis and specify its features
sec.axis = sec_axis(label = comma, trans=~./10, name="Quarentena")
) + theme(axis.title.y.left =element_text(face="bold", color = "red"),
axis.text.y.left = element_text(face="bold", color = "red"),
axis.line.y.left = element_line(color = "red"),
axis.ticks.y.left = element_line(color = "red"),
axis.text.y.right = element_text(face="bold"),
axis.title.y.right =element_text(face="bold"),
legend.title=element_blank())
library(dplyr)
library(data.table)
library(httr)
library(ggplot2)
library(scales)
library(tidyr)
library(zoo)
library(ggpubr)
theme_set(theme_pubr())
library(rvest)
baseURL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series"
confirmed <- fread(paste0(baseURL, "/time_series_covid19_confirmed_global.csv"))
deaths <- fread(paste0(baseURL, "/time_series_covid19_deaths_global.csv"))
recovered <- fread(paste0(baseURL, "/time_series_covid19_recovered_global.csv"))
# ------------------------------------------------------------------------------------------
## ORGANIZING DATA
treat_data <- function(dt, initial, countries) {
## Adding all provinces
dt <- dt[,-c("Province/State","Lat","Long") ]
dt <- dt[,lapply(.SD,sum),by="Country/Region"]
## Transposing
dt <- melt(dt, id.vars = "Country/Region", variable.name = "Date")
## Identifying Key Variables
setnames(dt, "Country/Region", "Country")
setkey(dt, "Country")
## Subsetting critical countries
dt_key <- dt[countries]
## Cases > initial value chosen
dt_key <- dt_key[value > initial]
dt_key <- dt_key[, Days := sequence(.N), by="Country" ]
return(dt_key)
}
model <- setDT(read.csv("U:/Corona/Results_Deads.csv"))
setnames(model, "誰..Days", "Days")
dt_baseline <- model[, c("Days", "Baseline")]
setnames(dt_baseline, "Baseline", "value")
dt_baseline <- dt_baseline[, "Case" := "Baseline"]
dt_quar <- model[, c("Days", "Quarantine")]
setnames(dt_quar, "Quarantine", "value")
dt_quar <- dt_quar[, "Case" := "Quarantine"]
dt_testing <- model[, c("Days", "Testing")]
setnames(dt_testing, "Testing", "value")
dt_testing <- dt_testing[, "Case" := "Testing"]
dt_hopkins <- treat_data(deaths, initial = 10, "Brazil")
dt_hopkins <- dt_hopkins[, -"Date"]
setnames(dt_hopkins, "Country", "Case")
setcolorder(dt_hopkins, c("Days", "value", "Case"))
dt_quar <- dt_quar[,value := value*10]
full_data <- rbind(dt_baseline, dt_quar, fill = T)
test_data <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
brazil_quar <- rbind(dt_hopkins, dt_quar, fill = T)
## PLOT 1
group.colors <- c(Brazil = "green", Baseline = "red", Quarantine ="black")
day_limit <- 360
y_lim <- max(full_data[Days < day_limit, value])
# Plot
ggplot(data = full_data, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors)+
scale_y_continuous(label = comma,
# Features of the first axis
name = "Baseline",
# Add a second axis and specify its features
sec.axis = sec_axis(label = comma, trans=~./10, name="Quarentena")
) + theme(axis.title.y.left =element_text(face="bold", color = "red"),
axis.text.y.left = element_text(face="bold", color = "red"),
axis.line.y.left = element_line(color = "red"),
axis.ticks.y.left = element_line(color = "red"),
axis.text.y.right = element_text(face="bold"),
axis.title.y.right =element_text(face="bold"),
legend.title=element_blank())
dt_quar <- dt_quar[,value := value/10]
full_data <- rbind(dt_baseline, dt_quar, fill = T)
test_data <- rbind(dt_baseline, dt_quar, dt_testing, fill = T)
brazil_quar <- rbind(dt_hopkins, dt_quar, fill = T)
## PLOT 2
group.colors <- c(Brazil = "green", Quarantine = "black")
day_limit <- 70
y_lim <- max(brazil_quar[ Days < day_limit, value])
# Plot
ggplot(data = brazil_quar, aes(x = Days, y = value)) +
geom_line(aes(color = factor(Case))) + geom_point(shape=1, alpha = 0.5) +
xlim(1, day_limit) + ylim(NA,y_lim) +  scale_color_manual(values=group.colors) +
scale_y_continuous(label = comma, limits=c(0, y_lim)) +
theme(legend.title=element_blank())
create_post("Beneficios da Quarentena")
library(distill)
create_post("Beneficios da Quarentena")
blogdown:::serve_site()
serve_site()
library(distill)
library(rmarkdown)
install.packages(FactSet3)
install.packages("FactSet3")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
remove.packages("FactSet")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
remove.packages("FactSet3")
remove.packages("FactSet3")
updateR()
library("installr")
updateR()
file.create(".nojekyll")
